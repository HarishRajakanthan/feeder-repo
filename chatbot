// Install dependencies: npm install react-chatbot-kit axios

import React, { useState, useEffect } from "react";
import Chatbot from "react-chatbot-kit";
import "react-chatbot-kit/build/main.css";
import axios from "axios";
import "./App.css"; // Add this to include styles

const START_CHAT_ENDPOINT = "https://your-backend-api.com/start-chat"; // Replace with your start-chat API URL
const CONVERSE_ENDPOINT = "https://your-backend-api.com/chat"; // Replace with your chat API URL

// Custom message parser
class MessageParser {
  constructor(actionProvider) {
    this.actionProvider = actionProvider;
  }

  parse(message) {
    this.actionProvider.handleUserMessage(message);
  }
}

// Custom action provider
class ActionProvider {
  constructor(createChatBotMessage, setStateFunc) {
    this.createChatBotMessage = createChatBotMessage;
    this.setState = setStateFunc;
  }

  async startChatSession() {
    try {
      const response = await axios.post(START_CHAT_ENDPOINT, {}, {
        headers: { "Content-Type": "application/json" },
      });

      const { sessionId, initialMessage } = response.data;
      
      // Update the chat with the initial message
      this.setState((prev) => ({
        ...prev,
        messages: [
          ...prev.messages,
          this.createChatBotMessage(initialMessage || "Hello!"),
        ],
      }));

      return sessionId;
    } catch (error) {
      console.error("Error starting chat session:", error);
      return null;
    }
  }

  async sendMessageToBackend(message, sessionId) {
    try {
      const response = await axios.post(
        CONVERSE_ENDPOINT,
        { message },
        {
          headers: { "Content-Type": "application/json" },
          params: { sessionId },
        }
      );

      return response.data;
    } catch (error) {
      console.error("Error communicating with backend:", error);
      return { reply: "Sorry, there was an error. Please try again." };
    }
  }

  async handleUserMessage(message) {
    let sessionId = localStorage.getItem("sessionId");

    if (!sessionId) {
      sessionId = await this.startChatSession();
      if (sessionId) {
        localStorage.setItem("sessionId", sessionId);
      } else {
        this.setState((prev) => ({
          ...prev,
          messages: [
            ...prev.messages,
            this.createChatBotMessage("Failed to start chat session. Please try again later."),
          ],
        }));
        return;
      }
    }

    this.setState((prev) => ({
      ...prev,
      messages: [
        ...prev.messages,
        this.createChatBotMessage(message, { user: true }),
      ],
    }));

    const data = await this.sendMessageToBackend(message, sessionId);

    this.setState((prev) => ({
      ...prev,
      messages: [
        ...prev.messages,
        this.createChatBotMessage(data.reply || "No response received."),
      ],
    }));
  }
}

// Chatbot config
const config = {
  botName: "ChatBot",
  initialMessages: [
    {
      id: 1,
      type: "bot",
      message: "Hi! How can I assist you today?",
    },
  ],
  state: {
    sessionId: null, // Initialize sessionId
  },
  customStyles: {
    botMessageBox: {
      backgroundColor: "#5a9",
    },
    chatButton: {
      backgroundColor: "#5a9",
    },
  },
};

// Main App component
const App = () => {
  const [showChat, setShowChat] = useState(false);

  return (
    <div className="App">
      <div className="chatbot-container">
        <img
          src="/logo.png" // Replace with your logo path
          alt="Chatbot Logo"
          className="chatbot-logo"
          onClick={() => setShowChat(!showChat)}
        />
        {showChat && (
          <div className="chatbot-popup">
            <Chatbot
              config={config}
              actionProvider={ActionProvider}
              messageParser={MessageParser}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default App;

/* CSS (App.css): 
.chatbot-container {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.chatbot-logo {
  cursor: pointer;
  width: 60px;
  height: 60px;
  margin: 10px;
}

.chatbot-popup {
  position: absolute;
  bottom: 70px; /* Position above the logo */
  left: 0;
  width: 300px;
  height: 400px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  overflow: hidden;
}
*/
