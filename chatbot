// Install dependencies: npm install react-chatbot-kit axios
import "./App.css";
import React, { useState } from "react";
import Chatbot from "react-chatbot-kit";
import "react-chatbot-kit/build/main.css";
import axios from "axios";

const API_ENDPOINT = "https://your-backend-api.com/chat"; // Replace with your backend API URL

// Custom message parser
class MessageParser {
  constructor(actionProvider) {
    this.actionProvider = actionProvider;
  }

  parse(message) {
    this.actionProvider.handleUserMessage(message);
  }
}

// Custom action provider
class ActionProvider {
  constructor(createChatBotMessage, setStateFunc) {
    this.createChatBotMessage = createChatBotMessage;
    this.setState = setStateFunc;
  }

  async sendMessageToBackend(message, sessionId) {
    try {
      const response = await axios.post(
        API_ENDPOINT,
        { message },
        {
          headers: { "Content-Type": "application/json" },
          params: { sessionId }, // Add sessionId as a parameter
        }
      );

      return response.data;
    } catch (error) {
      console.error("Error communicating with backend:", error);
      return { reply: "Sorry, there was an error. Please try again." };
    }
  }

  async handleUserMessage(message) {
    this.setState((prev) => ({
      ...prev,
      messages: [
        ...prev.messages,
        this.createChatBotMessage(message, { user: true }),
      ],
    }));

    const sessionId = localStorage.getItem("sessionId");

    const data = await this.sendMessageToBackend(message, sessionId);

    // Save session ID from initial response if not already saved
    if (!sessionId && data.sessionId) {
      localStorage.setItem("sessionId", data.sessionId);
    }

    this.setState((prev) => ({
      ...prev,
      messages: [
        ...prev.messages,
        this.createChatBotMessage(data.reply || "No response received."),
      ],
    }));
  }
}

// Chatbot config
const config = {
  botName: "ChatBot",
  initialMessages: [
    {
      id: 1,
      type: "bot",
      message: "Hi! How can I assist you today?",
    },
  ],
  state: {
    sessionId: null, // Initialize sessionId
  },
  customStyles: {
    botMessageBox: {
      backgroundColor: "#5a9",
    },
    chatButton: {
      backgroundColor: "#5a9",
    },
  },
};

// Main App component
const App = () => {
  const [showChat, setShowChat] = useState(false);

  return (
    <div className="App">
      <header className="App-header">
        <img
          src="./logo.png" // Replace with your logo path
          alt="Chatbot Logo"
          style={{ cursor: "pointer", width: "100px", height: "100px" }}
          onClick={() => setShowChat(!showChat)}
        />
        {showChat && (
          <Chatbot
            config={config}
            actionProvider={ActionProvider}
            messageParser={MessageParser}
          />
        )}
      </header>
    </div>
  );
};

export default App;


.App {
  font-family: sans-serif;
  text-align: center;
}
.chatbot-container {
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.chatbot-logo {
  cursor: pointer;
  width: 60px;
  height: 60px;
  margin: 10px;
}

.chatbot-popup {
  position: absolute;
  bottom: 70px; /* Position above the logo */
  left: 0;
  width: 300px;
  height: 400px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  overflow: hidden;
}
