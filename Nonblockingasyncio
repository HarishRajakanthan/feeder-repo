import pandas as pd
import asyncio
import aiohttp
from tqdm import tqdm

# Simulate a DataFrame with URLs
df = pd.DataFrame({
    'url': ['https://jsonplaceholder.typicode.com/posts/1'] * 10000
})

# This will hold the results in the same order as the DataFrame
results = [None] * len(df)

async def fetch(session, url, idx):
    try:
        async with session.get(url, timeout=10) as response:
            response.raise_for_status()
            data = await response.json()
            return idx, data  # Return index to maintain mapping
    except Exception as e:
        return idx, str(e)

async def run_all(urls):
    connector = aiohttp.TCPConnector(limit=1000)  # limit total concurrent connections
    timeout = aiohttp.ClientTimeout(total=60)
    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        tasks = [fetch(session, url, idx) for idx, url in enumerate(urls)]
        for coro in tqdm(asyncio.as_completed(tasks), total=len(tasks)):
            idx, result = await coro
            results[idx] = result

# Run the event loop
asyncio.run(run_all(df['url'].tolist()))

# Add results back to the DataFrame
df['response'] = results

print(df.head())
