import os
from collections import defaultdict
import hashlib
import csv

SQL_DIR = "path/to/sql/files"
REPORT_FILE = "common_sql_blocks_report.csv"

def normalize_sql_block(block):
    """Normalize SQL block by stripping spaces and converting to lowercase"""
    return "\n".join(line.strip().lower() for line in block if line.strip())

def get_sql_blocks(filename):
    """Extract SQL blocks from a file"""
    with open(filename, "r", encoding="utf-8") as file:
        sql_blocks = []
        current_block = []
        
        for line in file:
            line = line.strip()
            if line:
                current_block.append(line)
            else:
                if current_block:
                    sql_blocks.append(normalize_sql_block(current_block))
                    current_block = []
        
        if current_block:
            sql_blocks.append(normalize_sql_block(current_block))
    
    return sql_blocks

# Dictionary to store SQL block occurrences
block_map = defaultdict(set)

# Read all SQL files and extract blocks
for filename in os.listdir(SQL_DIR):
    if filename.endswith(".sql"):
        file_path = os.path.join(SQL_DIR, filename)
        sql_blocks = get_sql_blocks(file_path)
        
        for block in sql_blocks:
            block_hash = hashlib.md5(block.encode()).hexdigest()  # Hash to uniquely identify blocks
            block_map[block_hash].add(filename)

# Filter out unique blocks (only keep repeated ones)
common_blocks = {block: files for block, files in block_map.items() if len(files) > 1}

# Generate a CSV report
with open(REPORT_FILE, "w", newline="", encoding="utf-8") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["Common SQL Block", "Occurrence Count", "Files Containing It"])
    
    for block_hash, files in sorted(common_blocks.items(), key=lambda x: len(x[1]), reverse=True):
        sample_block = next(k for k, v in block_map.items() if hashlib.md5(k.encode()).hexdigest() == block_hash)
        writer.writerow([sample_block, len(files), ", ".join(files)])

print(f"Report generated: {REPORT_FILE}")
